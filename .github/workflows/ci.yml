name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read
  packages: write       # нужно, чтобы docker push в GHCR работал

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    # Поднимаем сервисы БД и Redis
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: us_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d us_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/us_db?currentSchema=userservice_data
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: localhost
      SPRING_REDIS_PORT: 6379
      MAVEN_OPTS: -Xmx1024m

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Verify DB availability
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && echo "Postgres ready" && break
            sleep 2           
          done

      - name: Create schema userservice_data (if not exists)
        env:
          PGPASSWORD: postgres
        run: |
          # устанавливаем psql (ubuntu runner) и создаем схему, если нужно
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          psql -h localhost -U postgres -d us_db -c "CREATE SCHEMA IF NOT EXISTS userservice_data;"


#      - name: Build and Test with Maven
#        run: mvn clean verify \
#          -Dspring.profiles.active=local \
#          -Dspring.datasource.url=${{ env.SPRING_DATASOURCE_URL }} \
#          -Dspring.datasource.username=${{ env.SPRING_DATASOURCE_USERNAME }} \
#          -Dspring.datasource.password=${{ env.SPRING_DATASOURCE_PASSWORD }} \
#          -Dspring.liquibase.default-schema=userservice_data

#      - name: Build and Test with Maven
#        run: mvn clean verify
#        env:
#          SPRING_PROFILES_ACTIVE: local
#          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/us_db?currentSchema=userservice_data
#          SPRING_DATASOURCE_USERNAME: postgres
#          SPRING_DATASOURCE_PASSWORD: postgres
#          SPRING_REDIS_HOST: localhost
#          SPRING_REDIS_PORT: 6379

      - name: Build and Test with Maven
        run: mvn clean verify -Dspring.profiles.active=local

      - name: Run SonarQube Analysis
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B sonar:sonar \
            -Dsonar.projectKey=UserService \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \          
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-build:
    needs: build-test-analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/user_service
          TAG=${{ github.sha }}
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG
          echo " Image pushed: $IMAGE_NAME:$TAG"
