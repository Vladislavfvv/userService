name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    # Поднимаем сервисы БД и Redis
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: us_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d us_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    env:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/us_db?currentSchema=userservice_data
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: localhost
      SPRING_REDIS_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Verify DB availability
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..10}; do
            nc -z localhost 5432 && echo "Postgres ready!" && break
            sleep 2
          done

      - name: Build and Test with Maven
        run: mvn clean verify -Dspring.profiles.active=local

      - name: Run SonarQube Analysis
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=UserService \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

  docker-build:
    needs: build-test-analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/user_service
          TAG=${{ github.sha }}
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG
          echo "✅ Image pushed: $IMAGE_NAME:$TAG"
